<?php
/**
 * ConfigurationEntryApi
 * PHP version 5
 *
 * @category Class
 * @package  VentureLeap\StorageService
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Storage API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.23
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace VentureLeap\StorageService\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use VentureLeap\StorageService\ApiException;
use VentureLeap\StorageService\Configuration;
use VentureLeap\StorageService\HeaderSelector;
use VentureLeap\StorageService\ObjectSerializer;

/**
 * ConfigurationEntryApi Class Doc Comment
 *
 * @category Class
 * @package  VentureLeap\StorageService
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ConfigurationEntryApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation deleteConfigurationEntryItem
     *
     * Removes the ConfigurationEntry resource.
     *
     * @param  string $uuid Resource identifier (required)
     *
     * @throws \VentureLeap\StorageService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteConfigurationEntryItem($uuid)
    {
        $this->deleteConfigurationEntryItemWithHttpInfo($uuid);
    }

    /**
     * Operation deleteConfigurationEntryItemWithHttpInfo
     *
     * Removes the ConfigurationEntry resource.
     *
     * @param  string $uuid Resource identifier (required)
     *
     * @throws \VentureLeap\StorageService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteConfigurationEntryItemWithHttpInfo($uuid)
    {
        $returnType = '';
        $request = $this->deleteConfigurationEntryItemRequest($uuid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteConfigurationEntryItemAsync
     *
     * Removes the ConfigurationEntry resource.
     *
     * @param  string $uuid Resource identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteConfigurationEntryItemAsync($uuid)
    {
        return $this->deleteConfigurationEntryItemAsyncWithHttpInfo($uuid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteConfigurationEntryItemAsyncWithHttpInfo
     *
     * Removes the ConfigurationEntry resource.
     *
     * @param  string $uuid Resource identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteConfigurationEntryItemAsyncWithHttpInfo($uuid)
    {
        $returnType = '';
        $request = $this->deleteConfigurationEntryItemRequest($uuid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteConfigurationEntryItem'
     *
     * @param  string $uuid Resource identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteConfigurationEntryItemRequest($uuid)
    {
        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling deleteConfigurationEntryItem'
            );
        }

        $resourcePath = '/storage/configuration_entries/{uuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'uuid' . '}',
                ObjectSerializer::toPathValue($uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getConfigurationEntryCollection
     *
     * Retrieves the collection of ConfigurationEntry resources.
     *
     * @param  int $page The collection page number (optional, default to 1)
     * @param  int $items_per_page The number of items per page (optional, default to 30)
     * @param  bool $pagination Enable or disable pagination (optional)
     * @param  string $key key (optional)
     * @param  string $sub_key sub_key (optional)
     * @param  string $value value (optional)
     * @param  string $application_id application_id (optional)
     *
     * @throws \VentureLeap\StorageService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \VentureLeap\StorageService\Model\InlineResponse200
     */
    public function getConfigurationEntryCollection($page = '1', $items_per_page = '30', $pagination = null, $key = null, $sub_key = null, $value = null, $application_id = null)
    {
        list($response) = $this->getConfigurationEntryCollectionWithHttpInfo($page, $items_per_page, $pagination, $key, $sub_key, $value, $application_id);
        return $response;
    }

    /**
     * Operation getConfigurationEntryCollectionWithHttpInfo
     *
     * Retrieves the collection of ConfigurationEntry resources.
     *
     * @param  int $page The collection page number (optional, default to 1)
     * @param  int $items_per_page The number of items per page (optional, default to 30)
     * @param  bool $pagination Enable or disable pagination (optional)
     * @param  string $key (optional)
     * @param  string $sub_key (optional)
     * @param  string $value (optional)
     * @param  string $application_id (optional)
     *
     * @throws \VentureLeap\StorageService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \VentureLeap\StorageService\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     */
    public function getConfigurationEntryCollectionWithHttpInfo($page = '1', $items_per_page = '30', $pagination = null, $key = null, $sub_key = null, $value = null, $application_id = null)
    {
        $returnType = '\VentureLeap\StorageService\Model\InlineResponse200';
        $request = $this->getConfigurationEntryCollectionRequest($page, $items_per_page, $pagination, $key, $sub_key, $value, $application_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VentureLeap\StorageService\Model\InlineResponse200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getConfigurationEntryCollectionAsync
     *
     * Retrieves the collection of ConfigurationEntry resources.
     *
     * @param  int $page The collection page number (optional, default to 1)
     * @param  int $items_per_page The number of items per page (optional, default to 30)
     * @param  bool $pagination Enable or disable pagination (optional)
     * @param  string $key (optional)
     * @param  string $sub_key (optional)
     * @param  string $value (optional)
     * @param  string $application_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getConfigurationEntryCollectionAsync($page = '1', $items_per_page = '30', $pagination = null, $key = null, $sub_key = null, $value = null, $application_id = null)
    {
        return $this->getConfigurationEntryCollectionAsyncWithHttpInfo($page, $items_per_page, $pagination, $key, $sub_key, $value, $application_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getConfigurationEntryCollectionAsyncWithHttpInfo
     *
     * Retrieves the collection of ConfigurationEntry resources.
     *
     * @param  int $page The collection page number (optional, default to 1)
     * @param  int $items_per_page The number of items per page (optional, default to 30)
     * @param  bool $pagination Enable or disable pagination (optional)
     * @param  string $key (optional)
     * @param  string $sub_key (optional)
     * @param  string $value (optional)
     * @param  string $application_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getConfigurationEntryCollectionAsyncWithHttpInfo($page = '1', $items_per_page = '30', $pagination = null, $key = null, $sub_key = null, $value = null, $application_id = null)
    {
        $returnType = '\VentureLeap\StorageService\Model\InlineResponse200';
        $request = $this->getConfigurationEntryCollectionRequest($page, $items_per_page, $pagination, $key, $sub_key, $value, $application_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getConfigurationEntryCollection'
     *
     * @param  int $page The collection page number (optional, default to 1)
     * @param  int $items_per_page The number of items per page (optional, default to 30)
     * @param  bool $pagination Enable or disable pagination (optional)
     * @param  string $key (optional)
     * @param  string $sub_key (optional)
     * @param  string $value (optional)
     * @param  string $application_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getConfigurationEntryCollectionRequest($page = '1', $items_per_page = '30', $pagination = null, $key = null, $sub_key = null, $value = null, $application_id = null)
    {

        $resourcePath = '/storage/configuration_entries';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page, null);
        }
        // query params
        if ($items_per_page !== null) {
            $queryParams['itemsPerPage'] = ObjectSerializer::toQueryValue($items_per_page, null);
        }
        // query params
        if ($pagination !== null) {
            $queryParams['pagination'] = ObjectSerializer::toQueryValue($pagination, null);
        }
        // query params
        if ($key !== null) {
            $queryParams['key'] = ObjectSerializer::toQueryValue($key, null);
        }
        // query params
        if ($sub_key !== null) {
            $queryParams['subKey'] = ObjectSerializer::toQueryValue($sub_key, null);
        }
        // query params
        if ($value !== null) {
            $queryParams['value'] = ObjectSerializer::toQueryValue($value, null);
        }
        // query params
        if ($application_id !== null) {
            $queryParams['applicationId'] = ObjectSerializer::toQueryValue($application_id, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getConfigurationEntryItem
     *
     * Retrieves a ConfigurationEntry resource.
     *
     * @param  string $uuid Resource identifier (required)
     *
     * @throws \VentureLeap\StorageService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \VentureLeap\StorageService\Model\ConfigurationEntryJsonldConfigurationRead
     */
    public function getConfigurationEntryItem($uuid)
    {
        list($response) = $this->getConfigurationEntryItemWithHttpInfo($uuid);
        return $response;
    }

    /**
     * Operation getConfigurationEntryItemWithHttpInfo
     *
     * Retrieves a ConfigurationEntry resource.
     *
     * @param  string $uuid Resource identifier (required)
     *
     * @throws \VentureLeap\StorageService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \VentureLeap\StorageService\Model\ConfigurationEntryJsonldConfigurationRead, HTTP status code, HTTP response headers (array of strings)
     */
    public function getConfigurationEntryItemWithHttpInfo($uuid)
    {
        $returnType = '\VentureLeap\StorageService\Model\ConfigurationEntryJsonldConfigurationRead';
        $request = $this->getConfigurationEntryItemRequest($uuid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VentureLeap\StorageService\Model\ConfigurationEntryJsonldConfigurationRead',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getConfigurationEntryItemAsync
     *
     * Retrieves a ConfigurationEntry resource.
     *
     * @param  string $uuid Resource identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getConfigurationEntryItemAsync($uuid)
    {
        return $this->getConfigurationEntryItemAsyncWithHttpInfo($uuid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getConfigurationEntryItemAsyncWithHttpInfo
     *
     * Retrieves a ConfigurationEntry resource.
     *
     * @param  string $uuid Resource identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getConfigurationEntryItemAsyncWithHttpInfo($uuid)
    {
        $returnType = '\VentureLeap\StorageService\Model\ConfigurationEntryJsonldConfigurationRead';
        $request = $this->getConfigurationEntryItemRequest($uuid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getConfigurationEntryItem'
     *
     * @param  string $uuid Resource identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getConfigurationEntryItemRequest($uuid)
    {
        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling getConfigurationEntryItem'
            );
        }

        $resourcePath = '/storage/configuration_entries/{uuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'uuid' . '}',
                ObjectSerializer::toPathValue($uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postConfigurationEntryCollection
     *
     * Creates a ConfigurationEntry resource.
     *
     * @param  \VentureLeap\StorageService\Model\ConfigurationEntryJsonldConfigurationWrite $body The new ConfigurationEntry resource (required)
     *
     * @throws \VentureLeap\StorageService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \VentureLeap\StorageService\Model\ConfigurationEntryJsonldConfigurationRead
     */
    public function postConfigurationEntryCollection($body)
    {
        list($response) = $this->postConfigurationEntryCollectionWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation postConfigurationEntryCollectionWithHttpInfo
     *
     * Creates a ConfigurationEntry resource.
     *
     * @param  \VentureLeap\StorageService\Model\ConfigurationEntryJsonldConfigurationWrite $body The new ConfigurationEntry resource (required)
     *
     * @throws \VentureLeap\StorageService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \VentureLeap\StorageService\Model\ConfigurationEntryJsonldConfigurationRead, HTTP status code, HTTP response headers (array of strings)
     */
    public function postConfigurationEntryCollectionWithHttpInfo($body)
    {
        $returnType = '\VentureLeap\StorageService\Model\ConfigurationEntryJsonldConfigurationRead';
        $request = $this->postConfigurationEntryCollectionRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VentureLeap\StorageService\Model\ConfigurationEntryJsonldConfigurationRead',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postConfigurationEntryCollectionAsync
     *
     * Creates a ConfigurationEntry resource.
     *
     * @param  \VentureLeap\StorageService\Model\ConfigurationEntryJsonldConfigurationWrite $body The new ConfigurationEntry resource (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postConfigurationEntryCollectionAsync($body)
    {
        return $this->postConfigurationEntryCollectionAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postConfigurationEntryCollectionAsyncWithHttpInfo
     *
     * Creates a ConfigurationEntry resource.
     *
     * @param  \VentureLeap\StorageService\Model\ConfigurationEntryJsonldConfigurationWrite $body The new ConfigurationEntry resource (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postConfigurationEntryCollectionAsyncWithHttpInfo($body)
    {
        $returnType = '\VentureLeap\StorageService\Model\ConfigurationEntryJsonldConfigurationRead';
        $request = $this->postConfigurationEntryCollectionRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postConfigurationEntryCollection'
     *
     * @param  \VentureLeap\StorageService\Model\ConfigurationEntryJsonldConfigurationWrite $body The new ConfigurationEntry resource (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postConfigurationEntryCollectionRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling postConfigurationEntryCollection'
            );
        }

        $resourcePath = '/storage/configuration_entries';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putConfigurationEntryItem
     *
     * Replaces the ConfigurationEntry resource.
     *
     * @param  \VentureLeap\StorageService\Model\ConfigurationEntryJsonldConfigurationWrite $body The updated ConfigurationEntry resource (required)
     * @param  string $uuid Resource identifier (required)
     *
     * @throws \VentureLeap\StorageService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \VentureLeap\StorageService\Model\ConfigurationEntryJsonldConfigurationRead
     */
    public function putConfigurationEntryItem($body, $uuid)
    {
        list($response) = $this->putConfigurationEntryItemWithHttpInfo($body, $uuid);
        return $response;
    }

    /**
     * Operation putConfigurationEntryItemWithHttpInfo
     *
     * Replaces the ConfigurationEntry resource.
     *
     * @param  \VentureLeap\StorageService\Model\ConfigurationEntryJsonldConfigurationWrite $body The updated ConfigurationEntry resource (required)
     * @param  string $uuid Resource identifier (required)
     *
     * @throws \VentureLeap\StorageService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \VentureLeap\StorageService\Model\ConfigurationEntryJsonldConfigurationRead, HTTP status code, HTTP response headers (array of strings)
     */
    public function putConfigurationEntryItemWithHttpInfo($body, $uuid)
    {
        $returnType = '\VentureLeap\StorageService\Model\ConfigurationEntryJsonldConfigurationRead';
        $request = $this->putConfigurationEntryItemRequest($body, $uuid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VentureLeap\StorageService\Model\ConfigurationEntryJsonldConfigurationRead',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putConfigurationEntryItemAsync
     *
     * Replaces the ConfigurationEntry resource.
     *
     * @param  \VentureLeap\StorageService\Model\ConfigurationEntryJsonldConfigurationWrite $body The updated ConfigurationEntry resource (required)
     * @param  string $uuid Resource identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putConfigurationEntryItemAsync($body, $uuid)
    {
        return $this->putConfigurationEntryItemAsyncWithHttpInfo($body, $uuid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putConfigurationEntryItemAsyncWithHttpInfo
     *
     * Replaces the ConfigurationEntry resource.
     *
     * @param  \VentureLeap\StorageService\Model\ConfigurationEntryJsonldConfigurationWrite $body The updated ConfigurationEntry resource (required)
     * @param  string $uuid Resource identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putConfigurationEntryItemAsyncWithHttpInfo($body, $uuid)
    {
        $returnType = '\VentureLeap\StorageService\Model\ConfigurationEntryJsonldConfigurationRead';
        $request = $this->putConfigurationEntryItemRequest($body, $uuid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putConfigurationEntryItem'
     *
     * @param  \VentureLeap\StorageService\Model\ConfigurationEntryJsonldConfigurationWrite $body The updated ConfigurationEntry resource (required)
     * @param  string $uuid Resource identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putConfigurationEntryItemRequest($body, $uuid)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling putConfigurationEntryItem'
            );
        }
        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling putConfigurationEntryItem'
            );
        }

        $resourcePath = '/storage/configuration_entries/{uuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'uuid' . '}',
                ObjectSerializer::toPathValue($uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
